/***************************
 * PRIVATE HELPER FUNCTIONS
 **************************/

-hako-breakpoints-is-string($value)
	return typeof($value) is not "unit" and ($value is a "string" or $value is a "ident")

-hako-breakpoints-get-scale-number($scaleName)
	return $n + 1 if $item is $scaleName for $item, $n in $hako["breakpoints"]["scaleNames"]
	return false

-hako-breakpoints-convert-to($toUnit = null, $value = null, $context = $hako["breakpoints"]["baseFontSize"])
	$fromUnit = unit($value)

	return $value if $toUnit is $fromUnit

	if $toUnit in ("em" "rem")
		return $value if $fromUnit in ("em" "rem")
		return unit(($value / $context), $toUnit)
	if $toUnit is "px"
		return unit(($value * $context), "px")

-hako-breakpoints-on-scale($n)
	return unit($n) is ""

-hako-breakpoints-larger-than-scale($n)
	return ($n > (length($hako["breakpoints"]["scale"]) - 1)) and -hako-breakpoints-on-scale($n)

-hako-breakpoints-is-zero($n)
	return $n is 0

-hako-breakpoints-overlap-shift($antiOverlap = null, $n = null)
	$shiftUnit = unit($n)

	$antiOverlap = 0px unless $antiOverlap
	$antiOverlap = 1px if $antiOverlap is true

	return -hako-breakpoints-convert-to($shiftUnit, $antiOverlap) if length($antiOverlap) is 1
	return $val if unit($val) is $shiftUnit for $val in $antiOverlap

-hako-breakpoints-adjust-overlap($antiOverlap = null, $n = null, $side = "min")
	$shift = -hako-breakpoints-overlap-shift($antiOverlap, $n)

	if ($side is "min" and $shift > 0) or ($side is "max" and $shift < 0)
		$n = $n + $shift
	return $n

-hako-breakpoints-convert-string-to-scale-number($str)
	return -hako-breakpoints-is-string($str) ? -hako-breakpoints-get-scale-number($str) : $str


/***************************
 * PUBLIC MIXINS
 **************************/

hako-between-bp($min = null, $max = null, $forIe8 = false, $block = false, $antiOverlap = $hako["breakpoints"]["antiOverlap"])
	$min = -hako-breakpoints-convert-string-to-scale-number($min)
	$max = -hako-breakpoints-convert-string-to-scale-number($max)

	-$min  = $hako["breakpoints"]["scale"][$min - 1] unless -hako-breakpoints-is-zero($min) or (not -hako-breakpoints-on-scale($min))
	-$max  = $hako["breakpoints"]["scale"][$max - 1] unless not -hako-breakpoints-on-scale($max - 1)
	-$min ?= $min
	-$max ?= $max

	$condition = "screen"

	unless -$min is 0
		-$min = -hako-breakpoints-convert-to("em", -$min) if $hako["breakpoints"]["emBreakpoints"]
		-$min = -hako-breakpoints-adjust-overlap($antiOverlap, -$min, $side: "min")
		$condition += " and (min-width %s)" % (-$min)

	unless -hako-breakpoints-larger-than-scale($max)
		-$max = -hako-breakpoints-convert-to("em", -$max) if $hako["breakpoints"]["emBreakpoints"]
		-$max = -hako-breakpoints-adjust-overlap($antiOverlap, -$max, $side: "max")
		$condition += " and (max-width %s)" % (-$max)

	if $hako["browser"]["isIe8"] is true and $forIe8
		{$block} unless $block is false
		{block}
	else
		@media $condition
			{$block} unless $block is false
			{block}

hako-at-bp($scalePoint = null, $forIe8 = false, $block = false, $antiOverlap = $hako["breakpoints"]["antiOverlap"])
	$max = -hako-breakpoints-convert-string-to-scale-number($scalePoint)
	$max = $hako["breakpoints"]["scale"][$max] unless not -hako-breakpoints-on-scale($max)

	hako-between-bp($scalePoint, $max, $forIe8, $block, $antiOverlap)

hako-from-bp($scalePoint = null, $forIe8 = false, $block = false, $antiOverlap = $hako["breakpoints"]["antiOverlap"])
	hako-between-bp($scalePoint, length($hako["breakpoints"]["scale"]), $forIe8, $block, $antiOverlap)

hako-to-bp($scalePoint = null, $forIe8 = false, $block = false, $antiOverlap = $hako["breakpoints"]["antiOverlap"])
	hako-between-bp(1, $scalePoint, $forIe8, $block, $antiOverlap)
