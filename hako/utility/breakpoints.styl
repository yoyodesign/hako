-hako-breakpoints-convert-to($toUnit = null, $value = null, $context = $hako["breakpoints"]["baseFontSize"])
	return $value if (not $value is a "unit")

	$fromUnit = unit($value)

	return $value if $toUnit is $fromUnit

	if $toUnit in ("em" "rem")
		return $value if $fromUnit in ("em" "rem")
		return unit(($value / $context), $toUnit)

	if $toUnit is "px"
		return unit(($value * $context), "px")

	return $value

-hako-breakpoints-overlap-shift($antiOverlap = null, $n = null)
	$shiftUnit = unit($n)

	$antiOverlap = 0px unless $antiOverlap
	$antiOverlap = 1px if $antiOverlap is true

	return -hako-breakpoints-convert-to($shiftUnit, $antiOverlap) if length($antiOverlap) is 1
	return $val if unit($val) is $shiftUnit for $val in $antiOverlap

-hako-breakpoints-adjust-overlap($antiOverlap = null, $n = null, $side = "min")
	$shift = -hako-breakpoints-overlap-shift($antiOverlap, $n)

	if ($side is "min" and $shift > 0) or ($side is "max" and $shift < 0)
		$n = $n + $shift
	return $n

hako-between-bp($min = null, $max = null, $forIe8 = false, $block = false, $antiOverlap = $hako["breakpoints"]["antiOverlap"])
	if $hako["browser"]["isIe8"] is true and $forIe8
		{$block} unless $block is false
		{block}
	else
		if $min
			-$min = $hako["breakpoints"]["scale"][$min] if $min is a "string"
			$min = -$min if -$min is a "unit"

			if $min is a "unit" and $min != 0
				$min = -hako-breakpoints-convert-to("em", $min) if $hako["breakpoints"]["emBreakpoints"]
				$min = -hako-breakpoints-adjust-overlap($antiOverlap, $min, $side: "min")

		if $max
			-$max = $hako["breakpoints"]["scale"][$max] if $max is a "string"
			$max = -$max if -$max is a "unit"

			if $max is a "unit" and $max != 0
				$max = -hako-breakpoints-convert-to("em", $max) if $hako["breakpoints"]["emBreakpoints"]
				$max = -hako-breakpoints-adjust-overlap($antiOverlap, $max, $side: "max")

		$condition = "screen"

		if $min is a "unit" and $min != 0
			$condition += " and (min-width %s)" % ($min)

		if $max is a "unit" and $max != 0
			$condition += " and (max-width %s)" % ($max)

		@media $condition
			{$block} unless $block is false
			{block}

hako-at-bp($scalePoint = null, $forIe8 = false, $block = false, $antiOverlap = $hako["breakpoints"]["antiOverlap"])
	$min = $scalePoint
	$max = $hako["breakpoints"]["scale"][$scalePoint]
	$found = false

	for $key, $value in $hako["breakpoints"]["scale"]
		$max = $value if $found is true
		$found = $key is $scalePoint

	$min = 0 if $hako["breakpoints"]["scale"][$scalePoint] is $max

	hako-between-bp($min, $max, $forIe8, $block, $antiOverlap)

hako-from-bp($scalePoint, $forIe8 = false, $block = false, $antiOverlap = $hako["breakpoints"]["antiOverlap"])
	hako-between-bp($scalePoint, null, $forIe8, $block, $antiOverlap)

hako-to-bp($scalePoint, $forIe8 = false, $block = false, $antiOverlap = $hako["breakpoints"]["antiOverlap"])
	hako-between-bp(null, $scalePoint, $forIe8, $block, $antiOverlap)
