@require "breakpoints"
@require "object"
@require "unit"

hako-typography($options, $override = {})
	$options = {} if !($options is a "object")
	$options = -hako-assign($options, $override) if $override is a "object"

	// Ensure style is set first, allowing us to then override
	// the weight and style if necessary.
	hako-typography-style($options["fontName"]) if "fontName" in $options

	padding $options["padding"] if "padding" in $options
	margin $options["margin"] if "margin" in $options

	font-weight $options["fontWeight"] if "fontWeight" in $options
	font-style $options["fontStyle"] if "fontStyle" in $options

	font-size $options["fontSize"] if "fontSize" in $options
	font-size-adjust $options["fontSizeAdjust"] if "fontSizeAdjust" in $options
	text-transform $options["textTransform"] if "textTransform" in $options
	letter-spacing $options["letterSpacing"] if "letterSpacing" in $options
	line-height $options["lineHeight"] if "lineHeight" in $options
	text-align $options["textAlign"] if "textAlign" in $options
	text-decoration $options["textDecoration"] if "textDecoration" in $options
	text-decoration-color $options["textDecorationColor"] if "textDecorationColor" in $options
	text-decoration-line $options["textDecorationLine"] if "textDecorationLine" in $options
	text-decoration-style $options["textDecorationStyle"] if "textDecorationStyle" in $options
	color $options["color"] if "color" in $options
	cursor $options["cursor"] if "cursor" in $options

	if "responsively" in $options
		for $key, $option in $options["responsively"]
			if $options is a "object"
				+hako-from-bp($key, -hako-is-ie8-breakpoint($key))
					hako-typography($option)

hako-typography-style($name)
	$customFonts = $hako["typography"]["customFonts"]

	if $customFonts is a "object" and $name in $customFonts
		$font = $customFonts[$name]

		if "fontFamily" in $font
			$fontFamily = $font["fontFamily"]

			font-family unquote($fontFamily)
			font-weight $font["fontWeight"] if "fontWeight" in $font
			font-style $font["fontStyle"] if "fontStyle" in $font
			font-display $font["fontDisplay"] if "fontDisplay" in $font

hako-font-format($type)
	$format = $type

	if $type == "otf"
		$format = "opentype"
	else if $type == "woff2"
		$format = "woff2"
	else if $type == "woff"
		$format = "woff"
	else if $type == "ttf"
		$format = "truetype"

	return unquote($format)

hako-font-face($fontName, $config)
	@font-face
		$fontTypes = "fontTypes" in $config ? $font["fontTypes"] : woff2 woff

		$srcs = ()

		for $type in $fontTypes
			$src = "url('/assets/fonts/%s/%s.%s') format('%s')" % (unquote($fontName) unquote($fontName) $type hako-font-format($type))
			push($srcs, $src)

		if length($src)
			font-family $fontName
			font-weight $config["fontWeight"] if "fontWeight" in $config
			font-style $config["fontStyle"] if "fontStyle" in $config
			font-display $config["fontDisplay"] if "fontDisplay" in $config

		src unquote(join(", ", $srcs)) if length($srcs) > 0

hako-link($config)
	$config = {} if !($config is a "object")

	hako-typography($config)

	if ":visited" in $config
		&:visited
			hako-link($config[":visited"])

	if ":hover" or ":focus" in $config
		$focus = ":hover" in $config ? $config[":hover"] : $config[":focus"]

		+hako-interaction()
			hako-typography($focus)

	if ":active" in $config
		&:active
			hako-link($config[":active"])

// This mixin is intentionally transparent.
font-size($size)
	font-size $size if $hako["browser"]["isIe8"] is true or $hako["typography"]["remify"] is false
	font-size -hako-rem($size) unless $hako["typography"]["remify"] is false or $hako["browser"]["isIe8"] is true
